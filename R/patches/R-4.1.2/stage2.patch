diff -ur --exclude '*.o' --exclude '*.d' --exclude '*.so' --exclude '*.a' --exclude '*.s' --exclude Makefile --exclude Makeconf --exclude libtool --exclude config.log R-4.1.2/src/main/errors.c R-4.1.2_web/src/main/errors.c
--- R-4.1.2/src/main/errors.c	2021-10-15 23:15:01.000000000 +0100
+++ R-4.1.2_web/src/main/errors.c	2022-01-19 14:55:18.937957523 +0000
@@ -1075,7 +1075,8 @@
 	}
     }
 
-    R_jumpctxt(R_ToplevelContext, 0, NULL);
+    //R_jumpctxt(R_ToplevelContext, 0, NULL);
+    R_jumpctxt(R_ToplevelContext, 1, NULL);
 }
 
 void NORET jump_to_toplevel()
@@ -1490,7 +1491,8 @@
     if (c != R_ToplevelContext)
 	warning(_("top level inconsistency?"));
 
-    R_jumpctxt(R_ToplevelContext, CTXT_TOPLEVEL, NULL);
+    //R_jumpctxt(R_ToplevelContext, CTXT_TOPLEVEL, NULL);
+    R_jumpctxt(R_ToplevelContext, 1, NULL);
 }
 #endif

diff -ur --exclude '*.o' --exclude '*.d' --exclude '*.so' --exclude '*.a' --exclude '*.s' --exclude Makefile --exclude Makeconf --exclude libtool --exclude config.log R-4.1.2/src/extra/xdr/rpc/xdr.h R-4.1.2_web/src/extra/xdr/rpc/xdr.h
--- R-4.1.2/src/extra/xdr/rpc/xdr.h	2018-09-25 08:46:43.000000000 +0000
+++ R-4.1.2_web/src/extra/xdr/rpc/xdr.h	2022-01-13 11:58:52.556848557 +0000
@@ -176,12 +176,20 @@
 #define	xdr_inline(xdrs, len)				\
 	(*(xdrs)->x_ops->x_inline)(xdrs, len)
 
+/*
 #define	XDR_DESTROY(xdrs)				\
 	if ((xdrs)->x_ops->x_destroy) 			\
 		(*(xdrs)->x_ops->x_destroy)(xdrs)
 #define	xdr_destroy(xdrs)				\
 	if ((xdrs)->x_ops->x_destroy) 			\
 		(*(xdrs)->x_ops->x_destroy)(xdrs)
+*/
+#define	XDR_DESTROY(xdrs)				\
+	if (0) 			\
+		(*(xdrs)->x_ops->x_destroy)(xdrs)
+#define	xdr_destroy(xdrs)				\
+	if (0) 			\
+		(*(xdrs)->x_ops->x_destroy)(xdrs)
 
 /*
  * Support struct for discriminated unions.
diff -ur --exclude '*.o' --exclude '*.d' --exclude '*.so' --exclude '*.a' --exclude '*.s' --exclude Makefile --exclude Makeconf --exclude libtool --exclude config.log R-4.1.2/src/main/Rstrptime.h R-4.1.2_web/src/main/Rstrptime.h
--- R-4.1.2/src/main/Rstrptime.h	2021-04-19 22:02:06.000000000 +0000
+++ R-4.1.2_web/src/main/Rstrptime.h	2022-01-12 11:43:33.820062492 +0000
@@ -40,7 +40,7 @@
 static int locale_strings_set = 0;
 static int locale_w_strings_set = 0;
 static void get_locale_strings(void);
-static void get_locale_w_strings(void);
+//static void get_locale_w_strings(void);
 
 
 #ifdef HAVE_STRINGS_H
@@ -276,7 +276,8 @@
 	case L'a':
 	case L'A':
 	    /* Match day of week.  */
-#if defined(HAVE_WCSFTIME)
+//#if defined(HAVE_WCSFTIME)
+#if 0
 	    if(!locale_w_strings_set) get_locale_w_strings();
 #endif
 	/* try full name first */
@@ -298,7 +299,8 @@
 	case L'B':
 	case L'h':
 	    /* Match month name.  */
-#if defined(HAVE_WCSFTIME)
+//#if defined(HAVE_WCSFTIME)
+#if 0
 	    if(!locale_w_strings_set) get_locale_w_strings();
 #endif
 	    /* try full name first */
@@ -388,7 +390,8 @@
 	  break;
 	case L'p':
 	  /* Match locale's equivalent of AM/PM.  */
-#if defined(HAVE_WCSFTIME)
+//#if defined(HAVE_WCSFTIME)
+#if 0
 	  if(!locale_w_strings_set) get_locale_w_strings();
 #endif
 	  if (!w_match_string (w_am_pm[0], rp)) {
@@ -1240,7 +1243,8 @@
     locale_strings_set = 1;
 }
 
-#if defined(HAVE_WCSTOD) && defined(HAVE_WCSFTIME)
+//#if defined(HAVE_WCSTOD) && defined(HAVE_WCSFTIME)
+#if 0
 static void get_locale_w_strings(void)
 {
     int i;
diff -ur --exclude '*.o' --exclude '*.d' --exclude '*.so' --exclude '*.a' --exclude '*.s' --exclude Makefile --exclude Makeconf --exclude libtool --exclude config.log R-4.1.2/src/main/arithmetic.c R-4.1.2_web/src/main/arithmetic.c
--- R-4.1.2/src/main/arithmetic.c	2021-10-15 22:15:01.000000000 +0000
+++ R-4.1.2_web/src/main/arithmetic.c	2022-01-11 16:25:07.659912454 +0000
@@ -63,6 +63,19 @@
    macOS had it for x86_64 even in 11.0, but not for arm64.
  */
 #ifndef __cplusplus
+#define DOMAIN 1
+#define SING 2
+#define OVERFLOW 3
+#define UNDERFLOW 4
+#define TLOSS 5
+#define PLOSS 6
+struct exception {
+	int    type;      /* Exception type */
+	char  *name;      /* Name of function causing exception */
+	double arg1;      /* 1st argument to function */
+	double arg2;      /* 2nd argument to function */
+	double retval;    /* Function return value */
+};
 int matherr(struct exception *exc)
 {
     switch (exc->type) {
diff -ur --exclude '*.o' --exclude '*.d' --exclude '*.so' --exclude '*.a' --exclude '*.s' --exclude Makefile --exclude Makeconf --exclude libtool --exclude config.log R-4.1.2/src/main/connections.c R-4.1.2_web/src/main/connections.c
--- R-4.1.2/src/main/connections.c	2021-07-02 22:15:02.000000000 +0000
+++ R-4.1.2_web/src/main/connections.c	2022-01-11 16:44:41.643937785 +0000
@@ -4277,21 +4277,12 @@
 	if (!strcmp(what, "integer") || !strcmp(what, "int")) {
 	    sizedef = sizeof(int); mode = 1;
 
-#if (SIZEOF_LONG == 8) && (SIZEOF_LONG > SIZEOF_INT)
-#  define CASE_LONG_ETC case sizeof(long):
-#elif (SIZEOF_LONG_LONG == 8) && (SIZEOF_LONG_LONG > SIZEOF_INT)
-#  define CASE_LONG_ETC case sizeof(_lli_t):
-#else
-#  define CASE_LONG_ETC
-#endif
-
 #define CHECK_INT_SIZES(SIZE, DEF) do {					\
 	    if(SIZE == NA_INTEGER) SIZE = DEF;				\
 	    switch (SIZE) {						\
 	    case sizeof(signed char):					\
 	    case sizeof(short):						\
 	    case sizeof(int):						\
-	    CASE_LONG_ETC						\
 		break;							\
 	    default:							\
 		error(_("size %d is unknown on this machine"), SIZE);	\
@@ -4569,25 +4560,6 @@
 	    case sizeof(int):
 		memcpy(buf, INTEGER(object), size * len);
 		break;
-#if SIZEOF_LONG == 8
-	    case sizeof(long):
-	    {
-		for (i = 0, j = 0; i < len; i++, j += size) {
-		    long l1 = (long) INTEGER(object)[i];
-		    memcpy(buf + j, &l1, size);
-		}
-		break;
-	    }
-#elif SIZEOF_LONG_LONG == 8
-	    case sizeof(_lli_t):
-	    {
-		for (i = 0, j = 0; i < len; i++, j += size) {
-		    _lli_t ll1 = (_lli_t) INTEGER(object)[i];
-		    memcpy(buf + j, &ll1, size);
-		}
-		break;
-	    }
-#endif
 	    case 2:
 	    {
 		for (i = 0, j = 0; i < len; i++, j += size) {
diff -ur R-4.1.2_web/src/library/stats/src/kmns.f R-4.1.2/src/library/stats/src/kmns.f
--- R-4.1.2/src/library/stats/src/kmns.f 2022-01-20 16:33:52.671125462 +0000
+++ R-4.1.2_web/src/library/stats/src/kmns.f     2019-06-02 23:15:02.000000000 +0100
@@ -440,7 +440,7 @@
    60   IF (ICOUN .EQ. M) RETURN
       end do

-      call rchkusr() ! allow user interrupt
+      call rchkusr(0) ! allow user interrupt
       GO TO 10
 c     --------
       END
diff -ur R-4.1.2_web/src/library/stats/src/ppr.f R-4.1.2/src/library/stats/src/ppr.f
--- R-4.1.2/src/library/stats/src/ppr.f  2022-01-20 16:34:05.299323950 +0000
+++ R-4.1.2_web/src/library/stats/src/ppr.f 2018-09-25 09:44:49.000000000 +0100
@@ -180,7 +180,7 @@
       asr(1)=big
       lm=0
       do 100 l=1,m
-         call rchkusr()
+         call rchkusr(0)
          lm=lm+1
          asrold=asr(1)
          call newb(lm,q,ww,b)
--- R-4.1.2/src/main/util.c 2022-01-20 16:34:43.155918958 +0000
+++ R-4.1.2_web/src/main/util.c 2021-07-02 23:15:02.000000000 +0100
@@ -1754,7 +1754,7 @@
     warning("%s", buf);
 }

-void F77_SYMBOL(rchkusr)(void)
+void F77_SYMBOL(rchkusr)(int dummy)
 {
     R_CheckUserInterrupt();
 }
diff -ur --exclude '*.o' --exclude '*.d' --exclude '*.so' --exclude '*.a' --exclude '*.s' --exclude Makefile --exclude Makeconf --exclude libtool --exclude config.log R-4.1.2/src/main/main.c R-4.1.2_web/src/main/main.c
--- R-4.1.2/src/main/main.c 2021-09-30 10:22:47.000000000 +0100
+++ R-4.1.2_web/src/main/main.c 2022-01-21 17:29:19.381163092 +0000
@@ -300,26 +300,68 @@
     return(0);
 }

+
+#include <emscripten.h>
+#include <emscripten/fetch.h>
+
+R_ReplState global_repl_state_async;
+SEXP global_rho_async;
+int global_savestack_async;
+int global_browselevel_async;
+
+int EMSCRIPTEN_KEEPALIVE run_R_from_JS(unsigned char* evalString, unsigned int n) {
+    R_IoBufferReadReset(&R_ConsoleIob);
+    R_IoBufferWriteReset(&R_ConsoleIob);
+    if(SETJMP(R_ToplevelContext->cjmpbuf) > 0){
+        return -1;
+    }
+    unsigned char * buf = (unsigned char *) malloc(n+2);
+    strncpy((char*) buf, (char*)evalString, n);
+    buf[n] = '\n';
+    buf[n+1] = '\0';
+    global_repl_state_async.bufp = buf;
+    while(*global_repl_state_async.bufp && Rf_ReplIteration(global_rho_async, global_savestack_async, global_browselevel_async, &global_repl_state_async) >= 0);
+    free(buf);
+    free(evalString);
+    return 0;
+}
+
+void repl_read_success(emscripten_fetch_t *fetch) {
+    memset(global_repl_state_async.buf, 0, CONSOLE_BUFFER_SIZE+1);
+    strncpy((char*)(global_repl_state_async.buf), fetch->data, CONSOLE_BUFFER_SIZE+1);
+    global_repl_state_async.buf[fetch->numBytes] = '\n';
+    global_repl_state_async.buf[fetch->numBytes+1] = '\0';
+    emscripten_fetch_close(fetch);
+    if(SETJMP(R_ToplevelContext->cjmpbuf) > 0){
+        R_IoBufferReadReset(&R_ConsoleIob);
+     R_IoBufferWriteReset(&R_ConsoleIob);
+     memset(global_repl_state_async.buf, 0, CONSOLE_BUFFER_SIZE+1);
+    }
+    global_repl_state_async.bufp = global_repl_state_async.buf;
+    while(Rf_ReplIteration(global_rho_async, global_savestack_async, global_browselevel_async, &global_repl_state_async) >= 0);
+}
+
+void repl_read_fail(emscripten_fetch_t *fetch) {
+    emscripten_fetch_close(fetch);
+}
+
 static void R_ReplConsole(SEXP rho, int savestack, int browselevel)
 {
-    int status;
-    R_ReplState state = { PARSE_NULL, 1, 0, "", NULL};
+    global_repl_state_async.status = PARSE_NULL;
+    global_repl_state_async.prompt_type = 1;
+    global_repl_state_async.browselevel = 0;
+    global_repl_state_async.bufp = NULL;

     R_IoBufferWriteReset(&R_ConsoleIob);
-    state.buf[0] = '\0';
-    state.buf[CONSOLE_BUFFER_SIZE] = '\0';
-    /* stopgap measure if line > CONSOLE_BUFFER_SIZE chars */
-    state.bufp = state.buf;
-    if(R_Verbose)
-     REprintf(" >R_ReplConsole(): before \"for(;;)\" {main.c}\n");
-    for(;;) {
-     status = Rf_ReplIteration(rho, savestack, browselevel, &state);
-     if(status < 0) {
-       if (state.status == PARSE_INCOMPLETE)
-         error(_("unexpected end of input"));
-       return;
-     }
-    }
+
+    global_repl_state_async.buf[0] = '\0';
+    global_repl_state_async.buf[CONSOLE_BUFFER_SIZE] = '\0';
+    global_repl_state_async.bufp = global_repl_state_async.buf;
+    global_rho_async = rho;
+    global_savestack_async = savestack;
+    global_browselevel_async = browselevel;
+
+    Rf_ReplIteration(global_rho_async, global_savestack_async, global_browselevel_async, &global_repl_state_async);
 }


@@ -647,7 +689,7 @@
 #ifdef HAVE_STACK_T
 static stack_t sigstk;
 #else
-static struct sigaltstack sigstk;
+//static struct sigaltstack sigstk;
 #endif
 static void *signal_stack;

@@ -667,8 +709,8 @@
          sigstk.ss_sp = signal_stack;
          sigstk.ss_size = SIGSTKSZ + R_USAGE;
          sigstk.ss_flags = 0;
-         if(sigaltstack(&sigstk, NULL) < 0)
-       warning("failed to set alternate signal stack");
+           //if(sigaltstack(&sigstk, NULL) < 0)
+           //  warning("failed to set alternate signal stack");
      } else
          warning("failed to allocate alternate signal stack");
      sa.sa_sigaction = sigactionSegv;
@@ -1128,7 +1170,7 @@
      check_session_exit();
     R_GlobalContext = R_ToplevelContext = R_SessionContext = &R_Toplevel;
     R_ReplConsole(R_GlobalEnv, 0, 0);
-    end_Rmainloop(); /* must go here */
+    // end_Rmainloop(); /* must go here */
 }

 void mainloop(void)
diff -ur --exclude '*.o' --exclude '*.d' --exclude '*.so' --exclude '*.a' --exclude '*.s' --exclude Makefile --exclude Makeconf --exclude libtool --exclude config.log R-4.1.2/src/unix/sys-std.c R-4.1.2_web/src/unix/sys-std.c
--- R-4.1.2/src/unix/sys-std.c	2021-09-28 23:15:01.000000000 +0100
+++ R-4.1.2_web/src/unix/sys-std.c	2022-01-19 13:26:13.705584920 +0000
@@ -49,6 +49,7 @@
 #include <R_ext/Riconv.h>
 #include <R_ext/Print.h> // for REprintf
 #include <R_ext/RS.h> // for Calloc
+#include "Parse.h"
 
 #define __SYSTEM__
 /* includes <sys/select.h> and <sys/time.h> */
@@ -949,6 +950,12 @@
 /* Fill a text buffer from stdin or with user typed console input. */
 static void *cd = NULL;
 
+
+#include <emscripten/fetch.h>
+#include <emscripten.h>
+void repl_read_success(emscripten_fetch_t *fetch);
+void repl_read_fail(emscripten_fetch_t *fetch);
+
 int attribute_hidden
 Rstd_ReadConsole(const char *prompt, unsigned char *buf, int len,
 		 int addtohistory)
@@ -1026,8 +1033,8 @@
 	else
 #endif /* HAVE_LIBREADLINE */
 	{
-	    fputs(prompt, stdout);
-	    fflush(stdout);
+           //fputs(prompt, stdout);
+           //fflush(stdout);
 	}
 
 	if(R_InputHandlers == NULL)
@@ -1085,10 +1092,16 @@
 		else
 #endif /* HAVE_LIBREADLINE */
 		{
-		    if(fgets((char *)buf, len, stdin) == NULL)
-			return 0;
-		    else
-			return 1;
+                    char scr[1024];
+                    sprintf(scr, "___terminal::read::%s", prompt);
+                    emscripten_fetch_attr_t attr;
+                    emscripten_fetch_attr_init(&attr);
+                    strcpy(attr.requestMethod, "GET");
+                    attr.attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY;
+                    attr.onsuccess = repl_read_success;
+                    attr.onerror = repl_read_fail;
+                    emscripten_fetch(&attr, scr);
+                    return 0;
 		}
 	    }
 	}
@@ -1334,7 +1347,7 @@
     R_ReadConsole("Enter file name: ", (unsigned char *)buf, len, 0);
     namelen = strlen(buf);
     bufp = &buf[namelen - 1];
-    while (bufp >= buf && isspace((int)*bufp))
+    while (bufp >= buf && ((char)*bufp == ' ' || (char)*bufp == '\t' ))
 	*bufp-- = '\0';
     return (int) strlen(buf);
 }
diff -ur --exclude '*.o' --exclude '*.d' --exclude '*.so' --exclude '*.a' --exclude '*.s' --exclude Makefile --exclude Makeconf --exclude libtool --exclude config.log R-4.1.2/src/unix/sys-unix.c R-4.1.2_web/src/unix/sys-unix.c
--- R-4.1.2/src/unix/sys-unix.c	2021-04-19 22:02:06.000000000 +0000
+++ R-4.1.2_web/src/unix/sys-unix.c	2022-01-12 16:33:53.612438356 +0000
@@ -237,7 +237,8 @@
     /* docs say this is rounded to the nearest ms */
     double et = currentTime() - StartTime;
     data[2] = 1e-3 * rint(1000*et);
-#ifdef HAVE_GETRUSAGE
+//#ifdef HAVE_GETRUSAGE
+#if 0
     /* all known current OSes */
     struct rusage self, children;
     getrusage(RUSAGE_SELF, &self);
@@ -445,8 +446,8 @@
     sigprocmask(SIG_BLOCK, &ss, &unblocked_ss);
 
     int saveerrno = errno;
-    while((wres = waitpid(tost.child_pid, wstatus, WNOHANG)) == 0)
-	sigsuspend(&unblocked_ss);
+    //while((wres = waitpid(tost.child_pid, wstatus, WNOHANG)) == 0)
+    //    sigsuspend(&unblocked_ss);
 
     if (errno == EINTR)
 	/* EINTR is not really an error but expected situation here, however,
diff -ur --exclude '*.o' --exclude '*.d' --exclude '*.so' --exclude '*.a' --exclude '*.s' --exclude Makefile --exclude Makeconf --exclude libtool --exclude config.log R-4.1.2/src/unix/system.c R-4.1.2_web/src/unix/system.c
--- R-4.1.2/src/unix/system.c	2021-04-20 23:15:01.000000000 +0100
+++ R-4.1.2_web/src/unix/system.c	2022-01-19 15:21:14.958574421 +0000
@@ -133,6 +133,7 @@
     }
 }
 
+#undef HAVE_GETRLIMIT
 #if defined(HAVE_SYS_RESOURCE_H) && defined(HAVE_GETRLIMIT)
 /*
   Needed by AIX and formerly by macOS (but not by POSIX).
--- R-4.1.2/src/include/Rinternals.h 2021-07-01 23:15:01.000000000 +0100
+++ R-4.1.2_web/src/include/Rinternals.h     2022-01-21 11:55:38.649300416 +0000
@@ -64,9 +64,9 @@
 # include <Rconfig.h>
 #endif

-#if ( SIZEOF_SIZE_T > 4 )
-# define LONG_VECTOR_SUPPORT
-#endif
+//#if ( SIZEOF_SIZE_T > 4 )
+//# define LONG_VECTOR_SUPPORT
+//#endif

 #ifdef LONG_VECTOR_SUPPORT
     typedef ptrdiff_t R_xlen_t;
--- R-4.1.2/src/main/eval.c 2021-06-19 23:15:01.000000000 +0100
+++ R-4.1.2_web/src/main/eval.c 2022-01-21 11:55:54.569544295 +0000
@@ -1708,7 +1708,7 @@
          refs -= countCycleRefs(rho, val);
      if (refs == 0) {
          for (SEXP b = FRAME(rho);
-        b != R_NilValue && REFCNT(b) == 1;
+        b != R_NilValue && REFCNT(b) == 1 && ((unsigned int)CDR(b))<0x30000000;
         b = CDR(b)) {
        if (BNDCELL_TAG(b)) continue;
        SEXP v = CAR(b);
--- R-4.1.2/src/main/envir.c    2021-04-23 23:15:01.000000000 +0100
+++ R-4.1.2_web/src/main/envir.c     2022-01-21 14:00:01.706412642 +0000
@@ -920,6 +920,7 @@
      frame = FRAME(rho);
      while (frame != R_NilValue && TAG(frame) != symbol)
          frame = CDR(frame);
+         if((unsigned int) frame > 0x30000000) return R_NilValue;
      return frame;
     }
     else {
@@ -1032,6 +1033,7 @@
          if (TAG(frame) == symbol)
        return BINDING_VALUE(frame);
          frame = CDR(frame);
+         if((unsigned int) frame > 0x30000000) return R_UnboundValue;
      }
     }
     else {
@@ -1081,6 +1083,7 @@
          if (TAG(frame) == symbol)
        return TRUE;
          frame = CDR(frame);
+         if((unsigned int) frame > 0x30000000) return FALSE;
      }
     }
     else {
@@ -1765,6 +1768,7 @@
        return symbol;
          }
          frame = CDR(frame);
+         if((unsigned int) frame > 0x30000000) return R_NilValue;
      }
     } else {
      /* Do the hash table thing */
--- R-4.1.2/src/main/dotcode.c  2021-04-19 23:02:06.000000000 +0100
+++ R-4.1.2_web/src/main/dotcode.c      2022-01-27 13:27:17.724512747 +0000
@@ -585,11 +585,49 @@
 typedef DL_FUNC VarFun;
 #endif

+#include <emscripten.h>
+EM_JS(SEXP, call_trampoline, (VarFun func,
+        void*   a0, void*  a1, void*  a2, void*  a3, void*  a4, void*  a5 , void* a6, void*  a7, void*  a8, void*  a9,
+        void*  a10, void* a11, void* a12, void* a13, void* a14, void* a15, void* a16, void* a17, void* a18, void* a19,
+        void*  a20, void* a21, void* a22, void* a23, void* a24, void* a25, void* a26, void* a27, void* a28, void* a29,
+        void*  a30, void* a31, void* a32, void* a33, void* a34, void* a35, void* a36, void* a37, void* a38, void* a39,
+        void*  a40, void* a41, void* a42, void* a43, void* a44, void* a45, void* a46, void* a47, void* a48, void* a49,
+        void*  a50, void* a51, void* a52, void* a53, void* a54, void* a55, void* a56, void* a57, void* a58, void* a59,
+        void*  a60, void* a61, void* a62, void* a63, void* a64
+    ), {
+    return wasmTable.get(func)(
+        a0,  a1,  a2,  a3,  a4,  a5 , a6,  a7,  a8,  a9,
+       a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
+       a20, a21, a22, a23, a24, a25, a26, a27, a28, a29,
+       a30, a31, a32, a33, a34, a35, a36, a37, a38, a39,
+       a40, a41, a42, a43, a44, a45, a46, a47, a48, a49,
+       a50, a51, a52, a53, a54, a55, a56, a57, a58, a59,
+       a60, a61, a62, a63, a64
+    );
+});
+
+
 SEXP attribute_hidden R_doDotCall(DL_FUNC ofun, int nargs, SEXP *cargs,
                                  SEXP call) {
     VarFun fun = NULL;
     SEXP retval = R_NilValue;  /* -Wall */
     fun = (VarFun) ofun;
+    retval = call_trampoline(fun,
+        cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],
+        cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],
+        cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],
+        cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],
+        cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],
+        cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],
+        cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],
+        cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],
+        cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],
+        cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],
+        cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],
+        cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],
+        cargs[60], cargs[61], cargs[62], cargs[63], cargs[64]
+    );
+    /*
     switch (nargs) {
     case 0:
        retval = (SEXP)ofun();
@@ -1243,6 +1281,7 @@
     default:
        errorcall(call, _("too many arguments, sorry"));
     }
+*/
     return check_retval(call, retval);
 }

@@ -1792,10 +1831,26 @@
        if (nprotect) UNPROTECT(nprotect);
     }

+    call_trampoline(fun,
+        cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],
+        cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],
+        cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],
+        cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],
+        cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],
+        cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],
+        cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],
+        cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],
+        cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],
+        cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],
+        cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],
+        cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],
+        cargs[60], cargs[61], cargs[62], cargs[63], cargs[64]
+    );
+/*
     switch (nargs) {
     case 0:
-       /* Silicon graphics C chokes here */
-       /* if there is no argument to fun. */
+       // Silicon graphics C chokes here
+       // if there is no argument to fun.
        fun(0);
        break;
     case 1:
@@ -2386,6 +2441,7 @@
     default:
        errorcall(call, _("too many arguments, sorry"));
     }
+*/

     for (na = 0, pa = args ; pa != R_NilValue ; pa = CDR(pa), na++) {
        void *p = cargs[na];
--- R-4.1.2/src/main/memory.c   2021-04-23 23:15:01.000000000 +0100
+++ R-4.1.2_web/src/main/memory.c       2022-01-28 14:19:58.494170006 +0000
@@ -604,7 +604,7 @@
    some ways, but will create more floating garbage and add a bit to
    the execution time, though the difference is probably marginal on
    both counts.*/
-/*#define EXPEL_OLD_TO_NEW*/
+#define EXPEL_OLD_TO_NEW
 static struct {
     SEXP Old[NUM_OLD_GENERATIONS], New, Free;
     SEXPREC OldPeg[NUM_OLD_GENERATIONS], NewPeg;

--- R-4.1.2/src/main/platform.c    2021-07-02 23:15:02.000000000 +0100
+++ R-4.1.2_web/src/main/platform.c 2022-02-25 14:11:11.309627799 +0000
@@ -3393,6 +3393,7 @@
     if (!dladdr((void *)do_eSoftVersion, &dl_info1)) ok = FALSE;
     if (!dladdr((void *)dladdr, &dl_info2)) ok = FALSE;

+#if 0
     if (ok && !strcmp(dl_info1.dli_fname, dl_info2.dli_fname)) {

        /* dladdr is not inside R, hence we probably have the PLT for
@@ -3420,6 +3421,7 @@
                dgemm_addr = dgemm_next_addr;
        }
     }
+#endif

     char buf[PATH_MAX+1];
     if (ok && dladdr(dgemm_addr, &dl_info1)) {
--- R-4.1.2/src/modules/internet/internet.c	2021-05-22 23:15:02.000000000 +0100
+++ R-4.1.2_web/src/modules/internet/internet.c	2022-02-09 14:04:24.825122326 +0000
@@ -797,124 +797,36 @@
     return ScalarInteger(status);
 }
 
-
 void *in_R_HTTPOpen(const char *url, const char *agent, const char *headers, int cacheOK)
 {
-    inetconn *con;
-    void *ctxt;
-    int timeout = asInteger(GetOption1(install("timeout")));
-    DLsize_t len = -1;
-    char *type = NULL;
-    char *fullheaders = NULL;
-
-    if(timeout == NA_INTEGER || timeout <= 0) timeout = 60;
-
-    RxmlNanoHTTPTimeout(timeout);
-
-    if (agent || headers) {
-	fullheaders = malloc((agent ? strlen(agent) : 0) +
-			     (headers ? strlen(headers) : 0) + 1);
-	if(!fullheaders) error(_("could not allocate memory for http headers"));
-	fullheaders[0] = '\0';
-	if (agent) strcat(fullheaders, agent);
-	if (headers) strcat(fullheaders, headers);
-    }
-
-    ctxt = RxmlNanoHTTPOpen(url, NULL, fullheaders, cacheOK);
-    if (fullheaders) free(fullheaders);
-
-    if(ctxt != NULL) {
-	int rc = RxmlNanoHTTPReturnCode(ctxt);
-	if(rc != 200) {
-	    // FIXME: should this be ctxt->location, after redirection?
-	    warning(_("cannot open URL '%s': %s status was '%d %s'"),
-		    url, "HTTP", rc, RxmlNanoHTTPStatusMsg(ctxt));
-	    RxmlNanoHTTPClose(ctxt);
-	    return NULL;
-	} else {
-	    type = RxmlNanoHTTPContentType(ctxt);
-	    len = RxmlNanoHTTPContentLength(ctxt);
-	    if(!IDquiet){
-		REprintf("Content type '%s'", type ? type : "unknown");
-		if(len > 1024*1024)
-		    // might be longer than long, and is on 64-bit windows
-		    REprintf(" length %0.0f bytes (%0.1f MB)\n", (double)len,
-			len/1024.0/1024.0);
-		else if(len > 10240)
-		    REprintf(" length %d bytes (%d KB)\n",
-			     (int)len, (int)(len/1024));
-		else if(len >= 0)
-		    REprintf(" length %d bytes\n", (int)len);
-		else REprintf(" length unknown\n", len);
-#ifdef Win32
-		R_FlushConsole();
-#endif
-	    }
-	}
-    } else return NULL;
-    con = (inetconn *) malloc(sizeof(inetconn));
-    if(con) {
-	con->length = len;
-	con->type = type;
-	con->ctxt = ctxt;
-    }
-    return con;
+    error(_("R_HTTPOpen is disabled on this system"));
 }
-
+ 
 static int in_R_HTTPRead(void *ctx, char *dest, int len)
-{
-    return RxmlNanoHTTPRead(((inetconn *)ctx)->ctxt, dest, len);
+{   
+    error(_("R_HTTPRead is disabled on this system"));
+    return -1;
 }
 
 static void in_R_HTTPClose(void *ctx)
 {
-    if(ctx) {
-	RxmlNanoHTTPClose(((inetconn *)ctx)->ctxt);
-	free(ctx);
-    }
+    error(_("R_HTTPClose is disabled on this system"));
 }
 
 static void *in_R_FTPOpen(const char *url)
 {
-    inetconn *con;
-    void *ctxt;
-    int timeout = asInteger(GetOption1(install("timeout")));
-    DLsize_t len = 0;
-
-    if(timeout == NA_INTEGER || timeout <= 0) timeout = 60;
-    RxmlNanoFTPTimeout(timeout);
-    ctxt = RxmlNanoFTPOpen(url);
-    if(!ctxt) return NULL;
-    if(!IDquiet) {
-	len = RxmlNanoFTPContentLength(ctxt);
-	if(len >= 0)
-	    REprintf("ftp data connection made, file length %ld bytes\n", len);
-	else
-	    REprintf("ftp data connection made, file length unknown\n");
-#ifdef Win32
-	R_FlushConsole();
-#endif
-    }
-    con = (inetconn *) malloc(sizeof(inetconn));
-    if(con) {
-	con->length = len;
-	con->type = NULL;
-	con->ctxt = ctxt;
-    }
-    return con;
+    error(_("R_FTPOpen is disabled on this system"));
 }
 
 static int in_R_FTPRead(void *ctx, char *dest, int len)
-{
-    return RxmlNanoFTPRead(((inetconn *)ctx)->ctxt, dest, len);
+{   
+    error(_("R_FTPRead is disabled on this system"));
+    return -1;
 }
 
 static void in_R_FTPClose(void *ctx)
 {
-    if(ctx) {
-	RxmlNanoFTPClose(((inetconn *)ctx)->ctxt);
-	free(ctx);
-    }
+    error(_("R_FTPClose is disabled on this system"));
 }
 
 
@@ -1089,27 +1001,6 @@
 #endif // Win32
 
 
-#define MBUFSIZE 8192
-void RxmlMessage(int level, const char *format, ...)
-{
-    int clevel;
-    char buf[MBUFSIZE], *p;
-    va_list(ap);
-
-    clevel = asInteger(GetOption1(install("internet.info")));
-    if(clevel == NA_INTEGER) clevel = 2;
-
-    if(level < clevel) return;
-
-    va_start(ap, format);
-    vsnprintf(buf, MBUFSIZE, format, ap);
-    buf[MBUFSIZE-1] = '\0';
-    va_end(ap);
-    p = buf + strlen(buf) - 1;
-    if(strlen(buf) > 0 && *p == '\n') *p = '\0';
-    warning(buf);
-}
-
 #include "sock.h"
 #define STRICT_R_HEADERS
 #include <R_ext/RS.h> /* for R_Calloc */
--- /dev/null	2022-01-25 23:02:12.136479304 +0000
+++ R-4.1.2_web/src/modules/internet/xhr.c	2022-02-10 13:57:58.304881196 +0000
@@ -0,0 +1,370 @@
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <stdio.h>
+#include <unistd.h>
+#include <emscripten/fetch.h>
+#include "Fileio.h"
+
+#define R_USE_SIGNALS 1
+#include <Defn.h>
+#include <Rconnections.h>
+#include <R_ext/R-ftp-http.h>
+#include <errno.h>
+#include <R_ext/Print.h>
+
+int in_R_HTTPDCreate(const char *ip, int port){
+    error(_("in_R_HTTPDCreate is disabled on this system"));
+    return -1;
+}
+void in_R_HTTPDStop(void){
+    error(_("in_R_HTTPDStop is disabled on this system"));
+}
+void in_Rsockopen(int *port)
+{
+    error(_("in_Rsockopen is disabled on this system"));
+}
+void in_Rsocklisten(int *sock, char **buf, int *len)
+{
+    error(_("in_Rsocklisten is disabled on this system"));
+}
+void in_Rsockconnect(int *port, char **host)
+{
+    error(_("in_Rsockconnect is disabled on this system"));
+}
+void in_Rsockclose(int *sockp)
+{
+    error(_("in_Rsockclose is disabled on this system"));
+}
+void in_Rsockread (int *sockp, char **buf, int *maxlen)
+{
+    error(_("in_Rsockread is disabled on this system"));
+}
+void in_Rsockwrite(int *sockp, char **buf, int *start, int *end, int *len)
+{
+    error(_("in_Rsockwrite is disabled on this system"));
+}
+int in_Rsockselect(int nsock, int *insockfd, int *ready, int *write,
+				   double timeout)
+{
+    error(_("in_Rsockselect is disabled on this system"));
+}
+Rconnection in_R_newservsock(int port)
+{
+    error(_("in_R_newservsock is disabled on this system"));
+}
+Rconnection in_R_newsock(const char *host, int port, int server, int serverfd,
+					 const char * const mode, int timeout, int options)
+{
+    error(_("in_R_newsock is disabled on this system"));
+}
+
+SEXP in_do_curlVersion(SEXP call, SEXP op, SEXP args, SEXP rho)
+{
+    checkArity(op, args);
+    SEXP ans = PROTECT(allocVector(STRSXP, 1));
+    SET_STRING_ELT(ans, 0, mkChar("Emscripten FETCH API - libcurl shim"));
+    UNPROTECT(1);
+    return ans;
+}
+
+SEXP in_do_curlGetHeaders(SEXP call, SEXP op, SEXP args, SEXP rho)
+{
+    error(_("in_do_curlGetHeaders is disabled on this system"));
+}
+
+extern void Rsleep(double timeint);
+typedef struct Fetchconn {
+    char *buf, *current; 
+    size_t bufSize;
+    size_t filled;
+    int status;
+    int complete;
+} *RFetchconn;
+
+void downloadSucceeded(emscripten_fetch_t *fetch) {
+  RFetchconn ctxt = (RFetchconn)(fetch->userData);
+  ctxt->status = fetch->status;
+  ctxt->buf = (char*)malloc(fetch->numBytes);
+  ctxt->filled = fetch->numBytes;
+  ctxt->bufSize = fetch->numBytes;
+  memcpy(ctxt->buf, fetch->data, fetch->numBytes);
+  ctxt->current = ctxt->buf;
+  ctxt->complete = 1;
+  emscripten_fetch_close(fetch);
+}
+
+void downloadFailed(emscripten_fetch_t *fetch) {
+  RFetchconn ctxt = (RFetchconn)(fetch->userData);
+  ctxt->status = fetch->status;
+  ctxt->complete = 1;
+  ctxt->filled = 0;
+  emscripten_fetch_close(fetch);
+}
+
+
+static Rboolean Fetch_open(Rconnection con)
+{
+    char *url = con->description;
+    emscripten_fetch_attr_t* attr = (emscripten_fetch_attr_t*) con->private;
+    RFetchconn ctxt = (RFetchconn)(attr->userData);
+    int mlen;
+
+    if (con->mode[0] != 'r') {
+	REprintf("can only open URLs for reading");
+	return FALSE;
+    }
+    
+    ctxt->complete = 0;
+    emscripten_fetch(attr, url);
+
+    R_Busy(1);
+    while (!ctxt->complete) {
+        emscripten_sleep(100);
+    }
+    R_Busy(0);
+
+    if (ctxt->status == 200){
+        con->isopen = TRUE;
+        con->canwrite = (con->mode[0] == 'w' || con->mode[0] == 'a');
+        con->canread = !con->canwrite;
+        mlen = (int) strlen(con->mode);
+        if (mlen >= 2 && con->mode[mlen - 1] == 'b') con->text = FALSE;
+        else con->text = TRUE;
+        con->save = -1000;
+        set_iconv(con);
+    } else {
+        error(_("cannot open the connection to '%s'"), url);
+    }
+    return TRUE;
+}
+
+#define R_MIN(a, b) ((a) < (b) ? (a) : (b))
+
+static size_t Fetch_read(void *ptr, size_t size, size_t nitems,
+			Rconnection con)
+{
+    emscripten_fetch_attr_t* attr = (emscripten_fetch_attr_t*) con->private;
+    RFetchconn ctxt = (RFetchconn)(attr->userData);
+
+    if(!ctxt->complete){
+        error(_("fetch download is incomplete"));
+    }
+    if(ctxt->status != 200){
+        error(_("cannot read result of fetch"));
+    }
+
+    size_t nbytes = size*nitems;
+    size_t total = R_MIN(ctxt->filled, nbytes);
+    memcpy(ptr, ctxt->current, total);
+    ctxt->current += total;
+    ctxt->filled -= total;
+    return total/size;
+}
+
+static int Fetch_fgetc_internal(Rconnection con)
+{
+    unsigned char c;
+    size_t n = Fetch_read(&c, 1, 1, con);
+    return (n == 1) ? c : R_EOF;
+}
+
+static void Fetch_destroy(Rconnection con)
+{
+    RFetchconn ctxt;
+
+    if (NULL == con)
+	return;
+    emscripten_fetch_attr_t* attr = (emscripten_fetch_attr_t*) con->private;
+    ctxt = (RFetchconn)(attr->userData);
+
+    if (NULL == ctxt)
+	return;
+
+    free(ctxt->buf);
+    free(ctxt);
+}
+
+static void Fetch_close(Rconnection con)
+{
+    emscripten_fetch_attr_t* attr = (emscripten_fetch_attr_t*) con->private;
+    RFetchconn ctxt = (RFetchconn)(attr->userData);
+    con->isopen = FALSE;
+}
+
+
+Rconnection
+in_newCurlUrl(const char *description, const char * const mode, SEXP headers, int type)
+{
+    Rconnection new = (Rconnection) malloc(sizeof(struct Rconn));
+    if (!new) error(_("allocation of url connection failed"));
+    new->class = (char *) malloc(strlen("url-libcurl") + 1);
+    if (!new->class) {
+	free(new);
+	error(_("allocation of url connection failed"));
+	/* for Solaris 12.5 */ new = NULL;
+    }
+    strcpy(new->class, "url-libcurl");
+    new->description = (char *) malloc(strlen(description) + 1);
+    if (!new->description) {
+	free(new->class); free(new);
+	error(_("allocation of url connection failed"));
+	/* for Solaris 12.5 */ new = NULL;
+    }
+    init_con(new, description, CE_NATIVE, mode);
+    new->canwrite = FALSE;
+    new->open = &Fetch_open;
+    new->close = &Fetch_close;
+    new->destroy = &Fetch_destroy;
+    new->fgetc_internal = &Fetch_fgetc_internal;
+    new->fgetc = &dummy_fgetc;
+    new->read = &Fetch_read;
+    new->private = (void *) malloc(sizeof(emscripten_fetch_attr_t));
+    if (!new->private) {
+	free(new->description); free(new->class); free(new);
+	error(_("allocation of url connection failed"));
+	/* for Solaris 12.5 */ new = NULL;
+    }
+    emscripten_fetch_attr_t* attr = (emscripten_fetch_attr_t*) new->private;
+    emscripten_fetch_attr_init(attr);
+    strcpy(attr->requestMethod, "GET");
+    attr->attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY;
+    attr->onsuccess = downloadSucceeded;
+    attr->onerror = downloadFailed;
+    attr->userData = (void *) malloc(sizeof(struct Fetchconn));
+    if (LENGTH(headers) > 0) warning(_("downloading with headers is disabled on this system"));
+    return new;
+}
+
+SEXP in_do_curlDownload(SEXP call, SEXP op, SEXP args, SEXP rho)
+{
+    checkArity(op, args);
+
+    SEXP scmd, sfile, smode, sheaders;
+    const char *url, *file, *mode;
+    int quiet, cacheOK;
+
+    scmd = CAR(args); args = CDR(args);
+    if (!isString(scmd) || length(scmd) < 1)
+        error(_("invalid '%s' argument"), "url");
+    int nurls = length(scmd);
+    sfile = CAR(args); args = CDR(args);
+    if (!isString(sfile) || length(sfile) < 1)
+        error(_("invalid '%s' argument"), "destfile");
+    if (length(sfile) != length(scmd))
+        error(_("lengths of 'url' and 'destfile' must match"));
+    quiet = asLogical(CAR(args)); args = CDR(args);
+    if (quiet == NA_LOGICAL)
+        error(_("invalid '%s' argument"), "quiet");
+    smode =  CAR(args); args = CDR(args);
+    if (!isString(smode) || length(smode) != 1)
+        error(_("invalid '%s' argument"), "mode");
+    mode = CHAR(STRING_ELT(smode, 0));
+    cacheOK = asLogical(CAR(args)); args = CDR(args);
+    if (cacheOK == NA_LOGICAL)
+        error(_("invalid '%s' argument"), "cacheOK");
+    sheaders = CAR(args);
+    if(TYPEOF(sheaders) != NILSXP && !isString(sheaders))
+        error(_("invalid '%s' argument"), "headers");
+    if(TYPEOF(sheaders) != NILSXP) {
+        warning(_("downloading with headers is disabled on this system"));
+    }
+
+    int n_err = 0, n_done = 0;
+    FILE *out[nurls];
+    emscripten_fetch_attr_t attrs[nurls];
+    RFetchconn ctxt;
+
+    for(int i = 0; i < nurls; i++) {
+        /* check that destfile can be written */
+        file = translateChar(STRING_ELT(sfile, i));
+        out[i] = R_fopen(R_ExpandFileName(file), mode);
+        if (!out[i]) {
+            n_err += 1;
+            warning(_("URL %s: cannot open destfile '%s', reason '%s'"),
+                    url, file, strerror(errno));
+            if (nurls == 1) break; else continue;
+        }
+    }
+
+    if (n_err == nurls) {
+        return ScalarInteger(1);
+    }
+
+    R_Busy(1);
+    for(int i = 0; i < nurls; i++) {
+        url = CHAR(STRING_ELT(scmd, i));
+        if (!quiet) REprintf(_("trying URL '%s'\n"), url);
+        emscripten_fetch_attr_init(&(attrs[i]));
+        strcpy(attrs[i].requestMethod, "GET");
+        attrs[i].attributes = EMSCRIPTEN_FETCH_LOAD_TO_MEMORY;
+        attrs[i].onsuccess = downloadSucceeded;
+        attrs[i].onerror = downloadFailed;
+        attrs[i].userData = (void *) malloc(sizeof(struct Fetchconn));
+        ctxt = (RFetchconn)(attrs[i].userData);
+        ctxt->complete = 0;
+        emscripten_fetch(&(attrs[i]), url);
+    }
+    while(n_done < nurls){
+        n_done = 0;
+        for(int i = 0; i < nurls; i++) {
+            ctxt = (RFetchconn)(attrs[i].userData);
+            n_done += ctxt->complete;
+        }
+        emscripten_sleep(100);
+    }
+    for(int i = 0; i < nurls; i++) {
+        ctxt = (RFetchconn)(attrs[i].userData);
+        if(ctxt->status == 200){
+            fwrite(ctxt->buf, ctxt->bufSize, 1, out[i]);
+        } else {
+            n_err += 1;
+        }
+    }
+    R_Busy(0);
+
+    if (nurls == 1) {
+        long status;
+        double cl, dl;
+        ctxt = (RFetchconn)(attrs[0].userData);
+        status = ctxt->status;
+        dl = ctxt->bufSize;
+
+        if (!quiet && status == 200) {
+            if (dl > 1024*1024)
+                REprintf("downloaded %0.1f MB\n\n", (double)dl/1024/1024);
+            else if (dl > 10240)
+                REprintf("downloaded %d KB\n\n", (int) dl/1024);
+            else
+                REprintf("downloaded %d bytes\n\n", (int) dl);
+        }
+    }
+
+    long status = 0L;
+    for (int i = 0; i < nurls; i++) {
+        if (out[i]) {
+            fclose(out[i]);
+            ctxt = (RFetchconn)(attrs[i].userData);
+            status = ctxt->status;
+            if (status != 200 && strchr(mode, 'w'))
+                unlink(R_ExpandFileName(translateChar(STRING_ELT(sfile, i))));
+        }
+    }
+
+    if(nurls > 1) {
+        if (n_err == nurls) error(_("cannot download any files"));
+        else if (n_err) warning(_("some files were not downloaded"));
+    } else if(n_err) {
+        if (status != 200)
+            error(_("cannot open URL '%s'"), CHAR(STRING_ELT(scmd, 0)));
+        else
+            error(_("download from '%s' failed"), CHAR(STRING_ELT(scmd, 0)));
+    }
+
+    for(int i = 0; i < nurls; i++) {
+        free(attrs[i].userData);
+    }
+
+    return ScalarInteger(0);
+}
